{
	"info": {
		"_postman_id": "44cb943a-caf6-4fcf-8127-fb5da3ea31bb",
		"name": "Identa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Authentication with empty fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/login?username=&password=",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": ""
								},
								{
									"key": "password",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication with wrong data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/login?username=@identa.io&password=0",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "@identa.io"
								},
								{
									"key": "password",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication with empty username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/login?username=&password={{password}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": ""
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication with empty password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/login?username={{username}}&password",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication without username parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/login?password={{password}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							],
							"query": [
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication without password parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/login?username={{username}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/login?username={{username}}&password={{password}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/logout",
							"host": [
								"{{domain}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Unauthorized tests",
			"item": [
				{
					"name": "Tenants (Unauthorized)",
					"item": [
						{
							"name": "Try to create new tenant (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Unauthorized New Tenant\",\r\n  \"description\": \"Some short unauthorized description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update tenant (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Unauthorized Tenant New Name\",\r\n  \"description\": \"Unauthorized Tenant New Description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/26d7090c-64fe-4dd2-b0ca-b674020b68b5",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"26d7090c-64fe-4dd2-b0ca-b674020b68b5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to get tenants (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove tenant (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/26d7090c-64fe-4dd2-b0ca-b674020b68b5",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"26d7090c-64fe-4dd2-b0ca-b674020b68b5"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;"
								]
							}
						}
					]
				},
				{
					"name": "Restaurants (Unauthorized)",
					"item": [
						{
							"name": "Try to create new restaurant (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 401\"] = responseCode.code === 401;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"Unauthorized Alias Name\",\r\n  \"name\": \"Unauthorized Restaurant Name\",\r\n  \"tenantId\": \"26d7090c-64fe-4dd2-b0ca-b674020b68b5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update restaurant (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 401\"] = responseCode.code === 401;\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"Unauthorized New Alias Name\",\r\n  \"name\": \"Unauthorized New Restaurant Name\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/26d7090c-64fe-4dd2-b0ca-b674020b68b5",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"26d7090c-64fe-4dd2-b0ca-b674020b68b5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get restaurants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove restaurant (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 401\"] = responseCode.code === 401;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/26d7090c-64fe-4dd2-b0ca-b674020b68b5",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"26d7090c-64fe-4dd2-b0ca-b674020b68b5"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Menus (Unauthorized)",
					"item": [
						{
							"name": "Try to create new menu (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoryName\": \"Unauthorized Category Name\",\r\n  \"description\": \"Unauthorized Description\",\r\n  \"name\": \"Unauthorized Name\",\r\n  \"restaurantId\": \"ea893044-0f97-425e-88f9-38cf43286899\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update menu (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoryName\": \"Unauthorized New Category Name\",\r\n  \"description\": \"Unauthorized New Description\",\r\n  \"name\": \"Unauthorized New Name\",\r\n  \"restaurantId\": \"ea893044-0f97-425e-88f9-38cf43286899\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/en653035-0f97-425e-88f9-34cf43286800",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"en653035-0f97-425e-88f9-34cf43286800"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to get all menus (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to delete menu (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/en653035-0f97-425e-88f9-34cf43286800",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"en653035-0f97-425e-88f9-34cf43286800"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;"
								]
							}
						}
					]
				},
				{
					"name": "Products (Unauthorized)",
					"item": [
						{
							"name": "Try to create new product (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"price\": \"2.99\",\r\n  \"name\": \"Unauthorized Name\",\r\n  \"menuId\": \"en653035-0f97-425e-88f9-34cf43286800\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update product (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"price\": \"3.99\",\r\n  \"name\": \"Unauthorized New Name\",\r\n  \"menuId\": \"en653035-0f97-425e-88f9-34cf43286800\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/gt653022-0f54-365e-88f9-34cf43286821",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"gt653022-0f54-365e-88f9-34cf43286821"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to delete product (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/gt653022-0f54-365e-88f9-34cf43286821",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"gt653022-0f54-365e-88f9-34cf43286821"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;"
								]
							}
						}
					]
				},
				{
					"name": "Users (Unauthorized)",
					"item": [
						{
							"name": "Try to create new user (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"First Name\",\r\n  \"lastName\": \"Last Name\",\r\n  \"username\": \"username\",\r\n  \"password\": \"Password\",\r\n  \"roleName\": \"CLIENT\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update user (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"First Unathorized Name\",\r\n  \"lastName\": \"Last Unathorized Name\",\r\n  \"username\": \"unathorized@identa.io\",\r\n  \"password\": \"Password\",\r\n  \"roleName\": \"CLIENT\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/fd852e20-f862-4753-adcd-c1a0c9a726c9",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"fd852e20-f862-4753-adcd-c1a0c9a726c9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to get users (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove user (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/02d38c11-ec7b-4e9f-b522-a7decdd3dcb0",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"02d38c11-ec7b-4e9f-b522-a7decdd3dcb0"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tenants",
			"item": [
				{
					"name": "Create Tenant With Empty Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"if (responseCode.code === 400) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Malformed JSON request\"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/v1/tenants",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to create tenant with empty fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"if (responseCode.code === 400) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Validation error occures\"] = jsonData.apiError.message == \"Validation error\"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (responseCode.code === 201) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"tenantID\", jsonData.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"The New Tenant\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to find tenant by not existed ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants/d4efc4de-b679-433c-9177-652880f95762",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants",
								"d4efc4de-b679-433c-9177-652880f95762"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find tenant by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants/{{tenantID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants",
								"{{tenantID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									"",
									"if (responseCode.code === 202) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"The name of the tenant has been updated\"] = jsonData.name === pm.environment.get(\"tenantNewName\");",
									"        tests[\"The description of the tenant has been updated\"] = jsonData.description === pm.environment.get(\"tenantNewDescription\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable (\"tenantNewName\", \"New Tenant Name\");\r",
									"postman.setEnvironmentVariable (\"tenantNewDescription\", \"Some new description\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{tenantNewName}}\",\r\n  \"description\": \"{{tenantNewDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants/{{tenantID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants",
								"{{tenantID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search tenant by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Tenant has been found by its ID\"] = jsonData.id = pm.environment.get(\"tenantID\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants/search?id={{tenantID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants",
								"search"
							],
							"query": [
								{
									"key": "id",
									"value": "{{tenantID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search tenant by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Tenant has been found by its name\"] = jsonData.name = pm.environment.get(\"tenantNewName\");",
									"    ",
									"        pm.environment.unset(\"tenantNewName\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants/search?name={{tenantNewName}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants",
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "{{tenantNewName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search tenant by Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Tenant has been found by its description\"] = jsonData.description = pm.environment.get(\"tenantNewDescription\");",
									"    ",
									"        pm.environment.unset(\"tenantNewDescription\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants/search?description={{tenantNewDescription}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants",
								"search"
							],
							"query": [
								{
									"key": "description",
									"value": "{{tenantNewDescription}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "username",
						"value": "{{username}}",
						"type": "string"
					},
					{
						"key": "password",
						"value": "{{password}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Restaurants",
			"item": [
				{
					"name": "Try to create a restaurant without Tenant ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"if (responseCode.code === 400) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Validation message occures - \" + jsonData.apiError.message] = jsonData.apiError.message == \"Validation error\";",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aliasName\": \"Alias Name\",\r\n  \"name\": \"Restaurant Name\",\r\n  \"tenantId\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/restaurants",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"restaurants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to create a restaurant with empty Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"if (responseCode.code === 400) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Validation message occures\"] = jsonData.apiError.message == \"Validation error\";",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aliasName\": \"Alias Name\",\r\n  \"name\": \"\",\r\n  \"tenantId\": \"{{tenantID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/restaurants",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"restaurants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to create a restaurant with empty AliasName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"if (responseCode.code === 400) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Validation message occures\"] = jsonData.apiError.message == \"Validation error\";",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aliasName\": \"\",\r\n  \"name\": \"Restaurant Name\",\r\n  \"tenantId\": \"{{tenantID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/restaurants",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"restaurants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (responseCode.code === 201) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"restaurantID\", jsonData.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aliasName\": \"Alias-Name\",\r\n  \"name\": \"Restaurant Name\",\r\n  \"tenantId\": \"{{tenantID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/restaurants",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"restaurants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to find restaurant by not existed ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/restaurants/d4efc4de-b679-433c-9177-652880f95762",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"restaurants",
								"d4efc4de-b679-433c-9177-652880f95762"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find restaurant by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/restaurants/{{restaurantID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"restaurants",
								"{{restaurantID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									"",
									"if (responseCode.code === 202) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"The name of the restaurant has been updated\"] = jsonData.name === pm.environment.get(\"restaurantNewName\");",
									"        tests[\"The alias name of the restaurant has been updated\"] = jsonData.aliasName === pm.environment.get(\"restaurantNewAliasName\");",
									"",
									"        pm.environment.unset(\"restaurantNewName\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  postman.setEnvironmentVariable(\"restaurantNewName\", \"New Restaurant Name\");\r",
									"  postman.setEnvironmentVariable (\"restaurantNewAliasName\", \"New-Alias-Name\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aliasName\": \"New-Alias-Name\",\r\n  \"name\": \"New Restaurant Name\",\r\n  \"tenantId\": \"{{tenantID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/restaurants/{{restaurantID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"restaurants",
								"{{restaurantID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get restaurants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/restaurants",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"restaurants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get restaurants by Tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants/{{tenantID}}/restaurants",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants",
								"{{tenantID}}",
								"restaurants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search restaurant by Alias Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Restaurant has been found by its alias name\"] = jsonData[0].aliasName === pm.environment.get(\"restaurantNewAliasName\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/restaurants/search?aliasName={{restaurantNewAliasName}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"restaurants",
								"search"
							],
							"query": [
								{
									"key": "aliasName",
									"value": "{{restaurantNewAliasName}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "username",
						"value": "{{username}}",
						"type": "string"
					},
					{
						"key": "password",
						"value": "{{password}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Menus",
			"item": [
				{
					"name": "Try to create a menu without Restaurant ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"if (responseCode.code === 400) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Validation message occures\"] = jsonData.apiError.message == \"Validation error\";",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Menu Name\",\r\n  \"categoryName\": \"\",\r\n  \"description\": \"\",\r\n  \"restaurantId\": \"\",\r\n  \"active\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/menus",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"menus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to create a menu with empty Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"if (responseCode.code === 400) {",
									"    var jsonData = JSON.parse(responseBody);  ",
									"        tests[\"Validation message occures\"] = jsonData.apiError.subErrors[0].message == \"This field is required and cannot be null or empty.\";",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"categoryName\": \"\",\r\n  \"description\": \"\",\r\n  \"restaurantId\": \"{{restaurantID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/menus",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"menus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (responseCode.code === 201) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"menuID\", jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Menu Name\",\r\n  \"categoryName\": \"\",\r\n  \"description\": \"\",\r\n  \"restaurantId\": \"{{restaurantID}}\",\r\n  \"active\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/menus",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"menus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to find menu by not existed ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/menus/11efc4de-b679-433c-9177-652880f95700",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"menus",
								"11efc4de-b679-433c-9177-652880f95700"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find menu by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/menus/{{menuID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"menus",
								"{{menuID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									"",
									"if (responseCode.code === 202) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"The name of the menu has been updated\"] = jsonData.name === pm.environment.get(\"newMenuName\");",
									"        tests[\"The description of the menu has been updated\"] = jsonData.description === pm.environment.get(\"newMenuDescription\");",
									"        tests[\"The category name of the menu has been updated\"] = jsonData.categoryName === pm.environment.get(\"newCategoryName\");",
									"        tests[\"The menu status has been updated\"] = jsonData.active = pm.environment.get(\"newMenuStatus\");",
									"    ",
									"        pm.environment.unset(\"newMenuName\");",
									"        pm.environment.unset(\"newMenuDescription\");",
									"        pm.environment.unset(\"newCategoryName\");",
									"        pm.environment.unset(\"newMenuStatus\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  postman.setEnvironmentVariable (\"newMenuName\", \"New Menu Name\");\r",
									"  postman.setEnvironmentVariable (\"newMenuDescription\", \"New Menu Description\");\r",
									"  postman.setEnvironmentVariable (\"newCategoryName\", \"New Category Name\");\r",
									"  postman.setEnvironmentVariable (\"newMenuStatus\", true)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"restaurantId\": \"{{restaurantID}}\",\r\n  \"name\": \"{{newMenuName}}\",\r\n  \"description\": \"{{newMenuDescription}}\",\r\n  \"categoryName\": \"{{newCategoryName}}\",\r\n  \"active\": {{newMenuStatus}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/menus/{{menuID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"menus",
								"{{menuID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all menus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/v1/menus",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"menus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get menus by Restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/v1/restaurants/{{restaurantID}}/menus",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"restaurants",
								"{{restaurantID}}",
								"menus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get active menus by Restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"if (responseCode.code === 200) {\r",
									"    pm.environment.unset(\"restaurantNewAliasName\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/v1/restaurants/{{restaurantNewAliasName}}/menus",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"restaurants",
								"{{restaurantNewAliasName}}",
								"menus"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "username",
						"value": "{{username}}",
						"type": "string"
					},
					{
						"key": "password",
						"value": "{{password}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Try to create new product without Menu ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"if (responseCode.code === 404) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Validation message occures\"] = jsonData.apiError.message == \"Validation error\";",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"price\": 0.00,\r\n  \"name\": \"Product Name\",\r\n  \"description\": \"Product description\",\r\n  \"menuId\": \"\",\r\n  \"active\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/products",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to create new product with empty Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"if (responseCode.code === 400) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Validation field is: name\"] = jsonData.apiError.subErrors[0].field = \"name\";    ",
									"        tests[\"Validation message occures\"] = jsonData.apiError.subErrors[0].message = \"This field is required and cannot be null or empty.\";",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"price\": 0.00,\r\n  \"name\": \"\",\r\n  \"description\": \"\",\r\n  \"menuId\": \"{{menuID}}\",\r\n  \"active\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/products",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (responseCode.code === 201) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"productID\", jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"price\": 0.00,\r\n  \"name\": \"Product Name\",\r\n  \"description\": \"\",\r\n  \"menuId\": \"{{menuID}}\",\r\n  \"active\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/products",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to find product by not existed ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/products/11efc4de-b679-433c-9177-652880f95799",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"11efc4de-b679-433c-9177-652880f95799"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/products/{{productID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{productID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									"",
									"if (responseCode.code === 202) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"The name of the product has been updated\"] = jsonData.name === pm.environment.get(\"newProductName\");",
									"        tests[\"The description of the product has been updated\"] = jsonData.description === pm.environment.get(\"newProductDescription\");",
									"        tests[\"The price of the product has been updated\"] = jsonData.price == pm.environment.get(\"newProductPrice\");",
									"        tests[\"The status of the product has been updated\"] = jsonData.price = pm.environment.get(\"newProductStatus\");",
									"    ",
									"        pm.environment.unset(\"newProductName\");",
									"        pm.environment.unset(\"newProductDescription\");",
									"        pm.environment.unset(\"newProductPrice\");",
									"        pm.environment.unset(\"newProductStatus\");      ",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  postman.setEnvironmentVariable (\"newProductName\", \"New Product Name\");\r",
									"  postman.setEnvironmentVariable (\"newProductDescription\", \"New Product Description\");\r",
									"  postman.setEnvironmentVariable (\"newProductPrice\", 1000000.99);\r",
									"  postman.setEnvironmentVariable (\"newProductStatus\", true)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"price\": {{newProductPrice}},\r\n  \"name\": \"{{newProductName}}\",\r\n  \"description\": \"{{newProductDescription}}\",\r\n  \"menuId\": \"{{menuID}}\",\r\n  \"active\": {{newProductStatus}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/products/{{productID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{productID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a product by image (jpg)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (responseCode.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"The image of the product has been uploaded\", function() {",
									"        pm.expect(jsonData).to.have.property('fileName');",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman/files/RainbowParadaise.jpg"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/products/{{productID}}/image",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{productID}}",
								"image"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a product by image (jpeg)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (responseCode.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"The image of the product has been uploaded\", function() {",
									"        pm.expect(jsonData).to.have.property('fileName');",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman/files/SexOnTheBeach.jpeg"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/products/{{productID}}/image",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{productID}}",
								"image"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a product by image (png)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (responseCode.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"The image of the product has been uploaded\", function() {",
									"        pm.expect(jsonData).to.have.property('fileName');",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman/files/94a109e32022d67c50e1647bc21e6f16.png"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/products/{{productID}}/image",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{productID}}",
								"image"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a product by image (gif)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (responseCode.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"The image of the product has been uploaded\", function() {",
									"        pm.expect(jsonData).to.have.property('fileName');",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman/files/giphy.gif"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/products/{{productID}}/image",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{productID}}",
								"image"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a product image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"if (responseCode.code === 200) { \r",
									"    pm.test(\"The image of the product has a .gif format\", function() {\r",
									"        pm.expect(pm.response.text()).to.include(\".gif\");\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/products/{{productID}}/image",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{productID}}",
								"image"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/v1/products",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "username",
						"value": "{{username}}",
						"type": "string"
					},
					{
						"key": "password",
						"value": "{{password}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Try to create new user without Role Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"if (responseCode.code === 400) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Validation message occures\"] = jsonData.apiError.message = \"Validation error\";",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"First Name\",\r\n  \"lastName\": \"Last Name\",\r\n  \"username\": \"usertype@identa.io\",\r\n  \"password\": \"Password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to create a staff member without Tenant ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"if (responseCode.code === 400) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Validation message occures\"] = jsonData.apiError.message = \"Tenant ID is mandatory\";",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"First Name\",\r\n  \"lastName\": \"Last Name\",\r\n  \"username\": \"staffuser@identa.io\",\r\n  \"password\": \"Password\",\r\n  \"roleName\": \"STAFF\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Client user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (responseCode.code === 201) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"userID\", jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" postman.setEnvironmentVariable (\"newUserUsername\", \"user@identa.io\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"First Name\",\r\n  \"lastName\": \"Last Name\",\r\n  \"username\": \"{{newUserUsername}}\",\r\n  \"password\": \"Password\",\r\n  \"roleName\": \"CLIENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to create new user with existing Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 409\"] = responseCode.code === 409;",
									"",
									"if (responseCode.code === 409) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Validation message occures\"] = jsonData.apiError.message = \"User with username '{{newUserUsername}}' already exist.\";",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"First Name\",\r\n  \"lastName\": \"Last Name\",\r\n  \"username\": \"{{newUserUsername}}\",\r\n  \"password\": \"Password\",\r\n  \"roleName\": \"CLIENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/{{userID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									"",
									"if (responseCode.code === 202) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"The First Name has been updated\"] = jsonData.firstName === pm.environment.get(\"userNewFirstName\");",
									"        tests[\"The Last Name has been updated\"] = jsonData.lastName === pm.environment.get(\"userNewLastName\");",
									"        tests[\"The User has been enabled\"] = jsonData.enabled === true;",
									"    ",
									"        pm.environment.unset(\"userNewFirstName\");",
									"        pm.environment.unset(\"userNewLastName\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" postman.setEnvironmentVariable (\"userNewFirstName\", \"New First Name\");\r",
									" postman.setEnvironmentVariable (\"userNewLastName\", \"New Last Name\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"{{userNewFirstName}}\",\r\n  \"lastName\": \"{{userNewLastName}}\",\r\n  \"username\": \"{{newUserUsername}}\",\r\n  \"password\": \"NewPassword\",\r\n  \"enabled\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/{{userID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get users by Tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants/{{tenantID}}/users",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants",
								"{{tenantID}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get users by Restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants/{{tenantID}}/restaurants/{{restaurantID}}/users",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants",
								"{{tenantID}}",
								"restaurants",
								"{{restaurantID}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find user by Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"The Username is the same what were looking for\"] = jsonData.username === pm.environment.get(\"newUserUsername\");",
									"",
									"        pm.environment.unset(\"newUserUsername\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/search?username={{newUserUsername}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"search"
							],
							"query": [
								{
									"key": "username",
									"value": "{{newUserUsername}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "username",
						"value": "{{username}}",
						"type": "string"
					},
					{
						"key": "password",
						"value": "{{password}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"",
									"if (responseCode.code === 201) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"orderID\", jsonData.id);",
									"        postman.setEnvironmentVariable(\"orderNumber\", jsonData.orderNumber);",
									"        postman.setEnvironmentVariable(\"orderItemID\", jsonData.items[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"restaurantId\": \"{{restaurantID}}\",\n    \"userId\": \"{{userID}}\",\n    \"items\": [\n        {\n            \"productId\": \"{{productID}}\",\n            \"quantity\": 1\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{domain}}/api/v1/orders",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/v1/orders",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/v1/orders/{{orderID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"{{orderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"restaurantId\": \"{{restaurantID}}\",\n    \"orderStatus\": \"NEW\",\n    \"items\": [\n        {\n            \"productId\": \"{{productID}}\",\n            \"quantity\": 1\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{domain}}/api/v1/orders/{{orderID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"{{orderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order by Order Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/v1/orders?order_number={{orderNumber}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"orders"
							],
							"query": [
								{
									"key": "order_number",
									"value": "{{orderNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Order Items for By Order Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/v1/orders/{{orderID}}/order-items",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"{{orderID}}",
								"order-items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item from Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/v1/orders/{{orderID}}/order-items/{{orderItemID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"{{orderID}}",
								"order-items",
								"{{orderItemID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Item to Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;",
									"if (responseCode.code === 202) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"orderItemID\", jsonData[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"productId\": \"{{productID}}\",\n        \"quantity\": 1\n    }\n]"
						},
						"url": {
							"raw": "{{domain}}/api/v1/orders/{{orderID}}/order-items",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"{{orderID}}",
								"order-items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item from Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": \"{{productID}}\",\n    \"quantity\": 2\n}"
						},
						"url": {
							"raw": "{{domain}}/api/v1/orders/{{orderID}}/order-items/{{orderItemID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"{{orderID}}",
								"order-items",
								"{{orderItemID}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{password}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{username}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tear Down",
			"item": [
				{
					"name": "Delete order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/v1/orders/{{orderID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"{{orderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/products/{{productID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{productID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/menus/{{menuID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"menus",
								"{{menuID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/{{userID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/restaurants/{{restaurantID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"restaurants",
								"{{restaurantID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants/{{tenantID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants",
								"{{tenantID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Remove all test data",
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{password}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{username}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}