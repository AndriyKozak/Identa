{
	"info": {
		"_postman_id": "46b76b25-a356-4b35-ac82-4bc1b86b1087",
		"name": "Identa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "907948"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Authentication with empty payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"",
									"if (responseCode.code === 400) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        tests[\"Validation error occurred\"] = jsonData.apiError.status == \"BAD_REQUEST\"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{domain}}/api/v1/users/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication with empty fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/login?username=&password=",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": ""
								},
								{
									"key": "password",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication with wrong data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/login?username=@identa.io&password=0",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "@identa.io"
								},
								{
									"key": "password",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication without username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/login?password={{password}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							],
							"query": [
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication without password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/login?username={{username}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"if (responseCode.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"adminID\", jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/login?username={{username}}&password={{password}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/logout",
							"host": [
								"{{domain}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Unauthorized tests",
			"item": [
				{
					"name": "Tenants (Unauthorized)",
					"item": [
						{
							"name": "Try to create new tenant (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Unauthorized New Tenant\",\r\n  \"description\": \"Some short unauthorized description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update tenant (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Unauthorized Tenant New Name\",\r\n  \"description\": \"Unauthorized Tenant New Description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/26d7090c-64fe-4dd2-b0ca-b674020b68b5",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"26d7090c-64fe-4dd2-b0ca-b674020b68b5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to get tenants (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove tenant (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/26d7090c-64fe-4dd2-b0ca-b674020b68b5",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"26d7090c-64fe-4dd2-b0ca-b674020b68b5"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;"
								]
							}
						}
					]
				},
				{
					"name": "Restaurants (Unauthorized)",
					"item": [
						{
							"name": "Try to create new restaurant (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 401\"] = responseCode.code === 401;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"Unauthorized Alias Name\",\r\n  \"name\": \"Unauthorized Restaurant Name\",\r\n  \"tenantId\": \"26d7090c-64fe-4dd2-b0ca-b674020b68b5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update restaurant (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 401\"] = responseCode.code === 401;\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"Unauthorized New Alias Name\",\r\n  \"name\": \"Unauthorized New Restaurant Name\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/26d7090c-64fe-4dd2-b0ca-b674020b68b5",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"26d7090c-64fe-4dd2-b0ca-b674020b68b5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get restaurants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove restaurant (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 401\"] = responseCode.code === 401;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/26d7090c-64fe-4dd2-b0ca-b674020b68b5",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"26d7090c-64fe-4dd2-b0ca-b674020b68b5"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Menus (Unauthorized)",
					"item": [
						{
							"name": "Try to create new menu (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoryName\": \"Unauthorized Category Name\",\r\n  \"description\": \"Unauthorized Description\",\r\n  \"name\": \"Unauthorized Name\",\r\n  \"restaurantId\": \"ea893044-0f97-425e-88f9-38cf43286899\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update menu (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoryName\": \"Unauthorized New Category Name\",\r\n  \"description\": \"Unauthorized New Description\",\r\n  \"name\": \"Unauthorized New Name\",\r\n  \"restaurantId\": \"ea893044-0f97-425e-88f9-38cf43286899\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/en653035-0f97-425e-88f9-34cf43286800",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"en653035-0f97-425e-88f9-34cf43286800"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to get all menus (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to delete menu (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/en653035-0f97-425e-88f9-34cf43286800",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"en653035-0f97-425e-88f9-34cf43286800"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;"
								]
							}
						}
					]
				},
				{
					"name": "Products (Unauthorized)",
					"item": [
						{
							"name": "Try to create new product (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"price\": \"2.99\",\r\n  \"name\": \"Unauthorized Name\",\r\n  \"menuId\": \"en653035-0f97-425e-88f9-34cf43286800\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update product (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"price\": \"3.99\",\r\n  \"name\": \"Unauthorized New Name\",\r\n  \"menuId\": \"en653035-0f97-425e-88f9-34cf43286800\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/gt653022-0f54-365e-88f9-34cf43286821",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"gt653022-0f54-365e-88f9-34cf43286821"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to delete product (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/gt653022-0f54-365e-88f9-34cf43286821",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"gt653022-0f54-365e-88f9-34cf43286821"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;"
								]
							}
						}
					]
				},
				{
					"name": "Users (Unauthorized)",
					"item": [
						{
							"name": "Try to create new user (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"First Name\",\r\n  \"lastName\": \"Last Name\",\r\n  \"username\": \"username\",\r\n  \"password\": \"Password\",\r\n  \"roleName\": \"CLIENT\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update user (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"First Unathorized Name\",\r\n  \"lastName\": \"Last Unathorized Name\",\r\n  \"username\": \"unathorized@identa.io\",\r\n  \"password\": \"Password\",\r\n  \"roleName\": \"CLIENT\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/fd852e20-f862-4753-adcd-c1a0c9a726c9",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"fd852e20-f862-4753-adcd-c1a0c9a726c9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to get users (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove user (Unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/02d38c11-ec7b-4e9f-b522-a7decdd3dcb0",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"02d38c11-ec7b-4e9f-b522-a7decdd3dcb0"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 401\"] = responseCode.code === 401;"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Administrator",
			"item": [
				{
					"name": "Tenants",
					"item": [
						{
							"name": "Try to create tenant with empty payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Malformed JSON request\"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/tenants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create tenant with empty fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Validation error\"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"if (responseCode.code === 201) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        postman.setEnvironmentVariable(\"adminTenantID\", jsonData.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"New Admin Tenant\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant for client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"if (responseCode.code === 201) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        postman.setEnvironmentVariable(\"clientTenantID\", jsonData.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"New Client Tenant\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to open not existing tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/d4efc4de-b679-433c-9177-652880f95762",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"d4efc4de-b679-433c-9177-652880f95762"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open a tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{adminTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{adminTenantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 202\"] = responseCode.code === 202;",
											"",
											"if (responseCode.code === 202) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The name of the tenant has been updated\"] = jsonData.name === pm.environment.get(\"tenantNewName\");",
											"        tests[\"The description of the tenant has been updated\"] = jsonData.description === pm.environment.get(\"tenantNewDescription\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable (\"tenantNewName\", \"New Admin Tenant Name\");\r",
											"postman.setEnvironmentVariable (\"tenantNewDescription\", \"Some new admin description\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{tenantNewName}}\",\r\n  \"description\": \"{{tenantNewDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{adminTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{adminTenantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search tenant by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Tenant has been found by its ID\"] = jsonData.id = pm.environment.get(\"adminTenantID\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/search?id={{adminTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"search"
									],
									"query": [
										{
											"key": "id",
											"value": "{{adminTenantID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search tenant by Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Tenant has been found by its name\"] = jsonData.name = pm.environment.get(\"tenantNewName\");",
											"    ",
											"        pm.environment.unset(\"tenantNewName\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/search?name={{tenantNewName}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "{{tenantNewName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search tenant by Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Tenant has been found by its description\"] = jsonData.description = pm.environment.get(\"tenantNewDescription\");",
											"    ",
											"        pm.environment.unset(\"tenantNewDescription\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/search?description={{tenantNewDescription}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"search"
									],
									"query": [
										{
											"key": "description",
											"value": "{{tenantNewDescription}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get tenants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Restaurants",
					"item": [
						{
							"name": "Try to create restaurant with empty payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Malformed JSON request\"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create a restaurant without Tenant ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Validation error\"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"Alias Name\",\r\n  \"name\": \"Restaurant Name\",\r\n  \"tenantId\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create a restaurant with empty Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Validation error\"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"Alias Name\",\r\n  \"name\": \"\",\r\n  \"tenantId\": \"{{adminTenantID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create a restaurant with empty AliasName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Validation error\"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"\",\r\n  \"name\": \"Restaurant Name\",\r\n  \"tenantId\": \"{{adminTenantID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"if (responseCode.code === 201) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        postman.setEnvironmentVariable(\"adminRestaurantID\", jsonData.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"alias-name\",\r\n  \"name\": \"Restaurant Name\",\r\n  \"tenantId\": \"{{adminTenantID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to open not existing restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/d4efc4de-b679-433c-9177-652880f95762",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"d4efc4de-b679-433c-9177-652880f95762"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open a restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{adminRestaurantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{adminRestaurantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 202\"] = responseCode.code === 202;",
											"",
											"if (responseCode.code === 202) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The name of the restaurant has been updated\"] = jsonData.name === pm.environment.get(\"restaurantNewName\");",
											"        tests[\"The alias name of the restaurant has been updated\"] = jsonData.aliasName === pm.environment.get(\"restaurantNewAliasName\");",
											"",
											"        pm.environment.set(\"restaurantNewAliasName\");",
											"        pm.environment.unset(\"restaurantNewName\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  postman.setEnvironmentVariable(\"restaurantNewName\", \"New Restaurant Name\");\r",
											"  postman.setEnvironmentVariable (\"restaurantNewAliasName\", \"new-alias-name\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"{{restaurantNewAliasName}}\",\r\n  \"name\": \"{{restaurantNewName}}\",\r\n  \"tenantId\": \"{{adminTenantID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{adminRestaurantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{adminRestaurantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get restaurants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get restaurants by Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{adminTenantID}}/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{adminTenantID}}",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search restaurant by Alias Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Restaurant has been found by its alias name\"] = jsonData.aliasName == pm.environment.get(\"restaurantNewAliasName\");",
											"",
											"    pm.environment.unset(\"restaurantNewAliasName\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/search?aliasName={{restaurantNewAliasName}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"search"
									],
									"query": [
										{
											"key": "aliasName",
											"value": "{{restaurantNewAliasName}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Menus",
					"item": [
						{
							"name": "Try to create a menu with empty payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Malformed JSON request\"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create a menu without Restaurant ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Validation error\"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Menu Name\",\r\n  \"categoryName\": \"\",\r\n  \"description\": \"\",\r\n  \"restaurantId\": \"\",\r\n  \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create a menu with empty Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Validation error\"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"categoryName\": \"\",\r\n  \"description\": \"\",\r\n  \"restaurantId\": \"{{adminRestaurantID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"if (responseCode.code === 201) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        postman.setEnvironmentVariable(\"adminMenuID\", jsonData.id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Menu Name\",\r\n  \"categoryName\": \"\",\r\n  \"description\": \"\",\r\n  \"restaurantId\": \"{{adminRestaurantID}}\",\r\n  \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to open not existing menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/11efc4de-b679-433c-9177-652880f95700",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"11efc4de-b679-433c-9177-652880f95700"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open a menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/{{adminMenuID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"{{adminMenuID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 202\"] = responseCode.code === 202;",
											"",
											"if (responseCode.code === 202) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The name of the menu has been updated\"] = jsonData.name === pm.environment.get(\"newMenuName\");",
											"        tests[\"The description of the menu has been updated\"] = jsonData.description === pm.environment.get(\"newMenuDescription\");",
											"        tests[\"The category name of the menu has been updated\"] = jsonData.categoryName === pm.environment.get(\"newCategoryName\");",
											"        tests[\"The menu status has been updated\"] = jsonData.active = pm.environment.get(\"newMenuStatus\");",
											"    ",
											"        pm.environment.unset(\"newMenuName\");",
											"        pm.environment.unset(\"newMenuDescription\");",
											"        pm.environment.unset(\"newCategoryName\");",
											"        pm.environment.unset(\"newMenuStatus\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  postman.setEnvironmentVariable (\"newMenuName\", \"New Menu Name\");\r",
											"  postman.setEnvironmentVariable (\"newMenuDescription\", \"New Menu Description\");\r",
											"  postman.setEnvironmentVariable (\"newCategoryName\", \"New Category Name\");\r",
											"  postman.setEnvironmentVariable (\"newMenuStatus\", true)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"restaurantId\": \"{{adminRestaurantID}}\",\r\n  \"name\": \"{{newMenuName}}\",\r\n  \"description\": \"{{newMenuDescription}}\",\r\n  \"categoryName\": \"{{newCategoryName}}\",\r\n  \"active\": {{newMenuStatus}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/{{adminMenuID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"{{adminMenuID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all menus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get menus by Restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{adminRestaurantID}}/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{adminRestaurantID}}",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get active menus by Restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"if (responseCode.code === 200) {\r",
											"    pm.environment.unset(\"restaurantNewAliasName\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{restaurantNewAliasName}}/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{restaurantNewAliasName}}",
										"menus"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Products",
					"item": [
						{
							"name": "Try to create new product with empty payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Malformed JSON request\"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/products",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create new product without Menu ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Validation error\"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"price\": 0.00,\r\n  \"name\": \"Product Name\",\r\n  \"description\": \"Product description\",\r\n  \"menuId\": \"\",\r\n  \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create new product with empty Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Validation error\"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"price\": 0.00,\r\n  \"name\": \"\",\r\n  \"description\": \"\",\r\n  \"menuId\": \"{{adminMenuID}}\",\r\n  \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"if (responseCode.code === 201) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        postman.setEnvironmentVariable(\"adminProductID\", jsonData.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"price\": 0.00,\r\n  \"name\": \"Product Name\",\r\n  \"description\": \"\",\r\n  \"menuId\": \"{{adminMenuID}}\",\r\n  \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to open not existing product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/11efc4de-b679-433c-9177-652880f95799",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"11efc4de-b679-433c-9177-652880f95799"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{adminProductID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{adminProductID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 202\"] = responseCode.code === 202;",
											"",
											"if (responseCode.code === 202) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The name of the product has been updated\"] = jsonData.name === pm.environment.get(\"newProductName\");",
											"        tests[\"The description of the product has been updated\"] = jsonData.description === pm.environment.get(\"newProductDescription\");",
											"        tests[\"The price of the product has been updated\"] = jsonData.price == pm.environment.get(\"newProductPrice\");",
											"        tests[\"The status of the product has been updated\"] = jsonData.price = pm.environment.get(\"newProductStatus\");",
											"    ",
											"        pm.environment.unset(\"newProductName\");",
											"        pm.environment.unset(\"newProductDescription\");",
											"        pm.environment.unset(\"newProductPrice\");",
											"        pm.environment.unset(\"newProductStatus\");      ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  postman.setEnvironmentVariable (\"newProductName\", \"New Product Name\");\r",
											"  postman.setEnvironmentVariable (\"newProductDescription\", \"New Product Description\");\r",
											"  postman.setEnvironmentVariable (\"newProductPrice\", 1000000.99);\r",
											"  postman.setEnvironmentVariable (\"newProductStatus\", true)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"price\": {{newProductPrice}},\r\n  \"name\": \"{{newProductName}}\",\r\n  \"description\": \"{{newProductDescription}}\",\r\n  \"menuId\": \"{{adminMenuID}}\",\r\n  \"active\": {{newProductStatus}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{adminProductID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{adminProductID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a product by image (jpg)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"The image of the product has been uploaded\", function() {",
											"        pm.expect(jsonData).to.have.property('fileName');",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "RainbowParadaise.jpg"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{adminProductID}}/image",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{adminProductID}}",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a product by image (jpeg)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"The image of the product has been uploaded\", function() {",
											"        pm.expect(jsonData).to.have.property('fileName');",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "SexOnTheBeach.jpeg"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{adminProductID}}/image",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{adminProductID}}",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a product by image (png)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"The image of the product has been uploaded\", function() {",
											"        pm.expect(jsonData).to.have.property('fileName');",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "94a109e32022d67c50e1647bc21e6f16.png"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{adminProductID}}/image",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{adminProductID}}",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a product by image (gif)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"The image of the product has been uploaded\", function() {",
											"        pm.expect(jsonData).to.have.property('fileName');",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "giphy.gif"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{adminProductID}}/image",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{adminProductID}}",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a product image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"if (responseCode.code === 200) { \r",
											"    pm.test(\"The image of the product has a .gif format\", function() {\r",
											"        pm.expect(pm.response.text()).to.include(\".gif\");\r",
											"});\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{adminProductID}}/image",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{adminProductID}}",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/products",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Try to create new user with empty payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Malformed JSON request\"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create new user without Role Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation error occurred\"] = jsonData.apiError.message == \"Validation error\"",
											"}",
											"",
											"",
											"",
											"postman.setNextRequest(\"03987c94-6eea-4035-9ef9-a897e451012b\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"First Name\",\r\n  \"lastName\": \"Last Name\",\r\n  \"username\": \"usertype@identa.io\",\r\n  \"password\": \"Password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create new client without Tenant ID (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation message occures\"] = jsonData.apiError.message = \"Tenant ID is mandatory\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"First Name\",\r\n  \"lastName\": \"Last Name\",\r\n  \"username\": \"clientwithouttenant@identa.io\",\r\n  \"password\": \"password\",\r\n  \"roleName\": \"CLIENT\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Client user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"if (responseCode.code === 201) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        postman.setEnvironmentVariable(\"clientID\", jsonData.id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"First Name\",\r\n  \"lastName\": \"Last Name\",\r\n  \"username\": \"{{clientUsername}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"tenantId\": \"{{clientTenantID}}\",\r\n  \"roleName\": \"CLIENT\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create new user with existing Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 409\"] = responseCode.code === 409;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"First Name\",\r\n  \"lastName\": \"Last Name\",\r\n  \"username\": \"{{clientUsername}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"roleName\": \"CLIENT\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to open not existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/21bcfea4-e5cb-4221-b279-be282ca73c95",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"21bcfea4-e5cb-4221-b279-be282ca73c95"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/{{clientID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{clientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 202\"] = responseCode.code === 202;",
											"",
											"if (responseCode.code === 202) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The First Name has been updated\"] = jsonData.firstName === pm.environment.get(\"userNewFirstName\");",
											"        tests[\"The Last Name has been updated\"] = jsonData.lastName === pm.environment.get(\"userNewLastName\");",
											"        tests[\"The User has been enabled\"] = jsonData.enabled === true;",
											"    ",
											"        pm.environment.unset(\"userNewFirstName\");",
											"        pm.environment.unset(\"userNewLastName\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" postman.setEnvironmentVariable (\"userNewFirstName\", \"New First Name\");\r",
											" postman.setEnvironmentVariable (\"userNewLastName\", \"New Last Name\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"{{userNewFirstName}}\",\r\n  \"lastName\": \"{{userNewLastName}}\",\r\n  \"username\": \"{{clientUsername}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"tenantId\": \"{{clientTenantID}}\",\r\n  \"enabled\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/{{clientID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{clientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{adminTenantID}}/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{adminTenantID}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by Restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{adminTenantID}}/restaurants/{{adminRestaurantID}}/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{adminTenantID}}",
										"restaurants",
										"{{adminRestaurantID}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find user by Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The Username is the same what were looking for\"] = jsonData.username === pm.environment.get(\"clientUsername\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/search?username={{clientUsername}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"search"
									],
									"query": [
										{
											"key": "username",
											"value": "{{clientUsername}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Admin Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/logout",
							"host": [
								"{{domain}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{password}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{username}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Client",
			"item": [
				{
					"name": "Tenants",
					"item": [
						{
							"name": "Try to open a tenant of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 403\"] = responseCode.code === 403;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{adminTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{adminTenantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update a tenant of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 403\"] = responseCode.code === 403;",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Tenant Name\",\r\n  \"description\": \"Some description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{adminTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{adminTenantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove a tenant of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 403\"] = responseCode.code === 403;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{adminTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{adminTenantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open own tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{clientTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{clientTenantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update own tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 202\"] = responseCode.code === 202;",
											"",
											"if (responseCode.code === 202) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The name of the tenant has been updated\"] = jsonData.name === pm.environment.get(\"tenantNewName\");",
											"        tests[\"The description of the tenant has been updated\"] = jsonData.description === pm.environment.get(\"tenantNewDescription\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable (\"tenantNewName\", \"New Client Tenant Name\");\r",
											"postman.setEnvironmentVariable (\"tenantNewDescription\", \"Some new client description\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{tenantNewName}}\",\r\n  \"description\": \"{{tenantNewDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{clientTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{clientTenantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search tenant by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Tenant has been found by its ID\"] = jsonData.id = pm.environment.get(\"clientTenantID\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/search?id={{clientTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"search"
									],
									"query": [
										{
											"key": "id",
											"value": "{{clientTenantID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search tenant by Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Tenant has been found by its name\"] = jsonData.name = pm.environment.get(\"tenantNewName\");",
											"    ",
											"        pm.environment.unset(\"tenantNewName\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/search?name={{tenantNewName}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "{{tenantNewName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search tenant by Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Tenant has been found by its description\"] = jsonData.description = pm.environment.get(\"tenantNewDescription\");",
											"    ",
											"        pm.environment.unset(\"tenantNewDescription\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/search?description={{tenantNewDescription}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"search"
									],
									"query": [
										{
											"key": "description",
											"value": "{{tenantNewDescription}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get tenants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Restaurants",
					"item": [
						{
							"name": "Create new restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"if (responseCode.code === 201) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        postman.setEnvironmentVariable(\"clientRestaurantID\", jsonData.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"ClientAliasName\",\r\n  \"name\": \"Client Restaurant Name\",\r\n  \"tenantId\": \"{{clientTenantID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to open a restaurant of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 403\"] = responseCode.code === 403;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{adminRestaurantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{adminRestaurantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update a restaurant of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 403\"] = responseCode.code === 403;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"NewClientAliasName\",\r\n  \"name\": \"New Client Restaurant Name\",\r\n  \"tenantId\": \"{{adminTenantID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{adminRestaurantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{adminRestaurantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove a restaurant of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([403,404])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{adminRestaurantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{adminRestaurantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open own restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{clientRestaurantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{clientRestaurantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update own restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 202\"] = responseCode.code === 202;",
											"",
											"if (responseCode.code === 202) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The name of the restaurant has been updated\"] = jsonData.name === pm.environment.get(\"restaurantNewName\");",
											"        tests[\"The alias name of the restaurant has been updated\"] = jsonData.aliasName === pm.environment.get(\"restaurantNewAliasName\");",
											"",
											"        pm.environment.unset(\"restaurantNewName\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  postman.setEnvironmentVariable(\"restaurantNewName\", \"New Client Restaurant Name\");\r",
											"  postman.setEnvironmentVariable (\"restaurantNewAliasName\", \"NewClientAliasName\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"{{restaurantNewAliasName}}\",\r\n  \"name\": \"{{restaurantNewName}}\",\r\n  \"tenantId\": \"{{clientTenantID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{clientRestaurantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{clientRestaurantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get restaurants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"postman.setNextRequest(\"d0dbb161-d30e-4721-ad71-01015f7b6a0c\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search restaurant by Alias Name (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Restaurant has been found by its alias name\"] = jsonData.aliasName === pm.environment.get(\"restaurantNewAliasName\");",
											"",
											"        pm.environment.unset(\"restaurantNewAliasName\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/search?aliasName={{restaurantNewAliasName}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"search"
									],
									"query": [
										{
											"key": "aliasName",
											"value": "{{restaurantNewAliasName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get restaurants by Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{clientTenantID}}/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{clientTenantID}}",
										"restaurants"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Menus",
					"item": [
						{
							"name": "Create new menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"if (responseCode.code === 201) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        postman.setEnvironmentVariable(\"clientMenuID\", jsonData.id);",
											"}",
											"",
											"",
											"",
											"postman.setNextRequest(\"394b4fc0-47fe-4501-8866-4399febe031f\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Client Menu Name\",\r\n  \"categoryName\": \"\",\r\n  \"description\": \"\",\r\n  \"restaurantId\": \"{{clientRestaurantID}}\",\r\n  \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to open a menu of another user (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 403\"] = responseCode.code === 403;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/{{adminMenuID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"{{adminMenuID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update a menu of another user (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 403\"] = responseCode.code === 403;\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"New Menu Name\",\r\n  \"categoryName\": \"\",\r\n  \"description\": \"NewMenuDescription\",\r\n  \"restaurantId\": \"{{adminRestaurantID}}\",\r\n  \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/{{adminMenuID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"{{adminMenuID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove a menu of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([403,404])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{adminMenuID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{adminMenuID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open own menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/{{clientMenuID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"{{clientMenuID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update own menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 202\"] = responseCode.code === 202;",
											"",
											"if (responseCode.code === 202) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The name of the menu has been updated\"] = jsonData.name === pm.environment.get(\"newMenuName\");",
											"        tests[\"The description of the menu has been updated\"] = jsonData.description === pm.environment.get(\"newMenuDescription\");",
											"        tests[\"The category name of the menu has been updated\"] = jsonData.categoryName === pm.environment.get(\"newCategoryName\");",
											"        tests[\"The menu status has been updated\"] = jsonData.active = pm.environment.get(\"newMenuStatus\");",
											"    ",
											"        pm.environment.unset(\"newMenuName\");",
											"        pm.environment.unset(\"newMenuDescription\");",
											"        pm.environment.unset(\"newCategoryName\");",
											"        pm.environment.unset(\"newMenuStatus\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  postman.setEnvironmentVariable (\"newMenuName\", \"New Menu Name\");\r",
											"  postman.setEnvironmentVariable (\"newMenuDescription\", \"New Menu Description\");\r",
											"  postman.setEnvironmentVariable (\"newCategoryName\", \"New Category Name\");\r",
											"  postman.setEnvironmentVariable (\"newMenuStatus\", true)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"restaurantId\": \"{{clientRestaurantID}}\",\r\n  \"name\": \"{{newMenuName}}\",\r\n  \"description\": \"{{newMenuDescription}}\",\r\n  \"categoryName\": \"{{newCategoryName}}\",\r\n  \"active\": {{newMenuStatus}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/{{clientMenuID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"{{clientMenuID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all menus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get menus by Restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{clientRestaurantID}}/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{clientRestaurantID}}",
										"menus"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Products",
					"item": [
						{
							"name": "Create new product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"if (responseCode.code === 201) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        postman.setEnvironmentVariable(\"clientProductID\", jsonData.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"price\": 0.00,\r\n  \"name\": \"Product Name\",\r\n  \"description\": \"\",\r\n  \"menuId\": \"{{clientMenuID}}\",\r\n  \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to open a product of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"postman.setNextRequest(\"509ab9bc-e09b-4147-9e0b-50d7e3c7626f\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{adminProductID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{adminProductID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update a product of another user (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 403\"] = responseCode.code === 403;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"New Menu Name\",\r\n  \"categoryName\": \"\",\r\n  \"description\": \"NewMenuDescription\",\r\n  \"restaurantId\": \"{{adminRestaurantID}}\",\r\n  \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{adminProductID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{adminProductID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove a product of another user (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([403,404])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{adminProductID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{adminProductID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open own product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{clientProductID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{clientProductID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update own product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 202\"] = responseCode.code === 202;",
											"",
											"if (responseCode.code === 202) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The name of the product has been updated\"] = jsonData.name === pm.environment.get(\"newProductName\");",
											"        tests[\"The description of the product has been updated\"] = jsonData.description === pm.environment.get(\"newProductDescription\");",
											"        tests[\"The price of the product has been updated\"] = jsonData.price == pm.environment.get(\"newProductPrice\");",
											"        tests[\"The status of the product has been updated\"] = jsonData.price = pm.environment.get(\"newProductStatus\");",
											"    ",
											"        pm.environment.unset(\"newProductName\");",
											"        pm.environment.unset(\"newProductDescription\");",
											"        pm.environment.unset(\"newProductPrice\");",
											"        pm.environment.unset(\"newProductStatus\");      ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  postman.setEnvironmentVariable (\"newProductName\", \"New Product Name\");\r",
											"  postman.setEnvironmentVariable (\"newProductDescription\", \"New Product Description\");\r",
											"  postman.setEnvironmentVariable (\"newProductPrice\", 1000000.99);\r",
											"  postman.setEnvironmentVariable (\"newProductStatus\", true)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"price\": {{newProductPrice}},\r\n  \"name\": \"{{newProductName}}\",\r\n  \"description\": \"{{newProductDescription}}\",\r\n  \"menuId\": \"{{adminMenuID}}\",\r\n  \"active\": {{newProductStatus}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{clientProductID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{clientProductID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update own product by image (gif)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"The image of the product has been uploaded\", function() {",
											"        pm.expect(jsonData).to.have.property('fileName');",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "giphy.gif"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{clientProductID}}/image",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{clientProductID}}",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a product image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"if (responseCode.code === 200) { \r",
											"    pm.test(\"The image of the product has a .gif format\", function() {\r",
											"        pm.expect(pm.response.text()).to.include(\".gif\");\r",
											"});\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{clientProductID}}/image",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{clientProductID}}",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"postman.setNextRequest(\"d17c50b4-47de-4d6c-ac2d-3e44182e3d69\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/products",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Try to create a Staff member without Tenant ID (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation message occurs\"] = jsonData.apiError.message = \"Tenant ID is mandatory\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"First Name\",\r\n  \"lastName\": \"Last Name\",\r\n  \"username\": \"staffwithoutteant@identa.io\",\r\n  \"password\": \"Password\",\r\n  \"roleName\": \"STAFF\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to create a Staff member without Restaurant ID (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											"",
											"if (responseCode.code === 400) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Validation message occures\"] = jsonData.apiError.message = \"Restaurant ID is mandatory\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"First Name\",\r\n  \"lastName\": \"Last Name\",\r\n  \"username\": \"staffwithoutrestaurant@identa.io\",\r\n  \"password\": \"Password\",\r\n  \"roleName\": \"STAFF\",\r\n  \"tenantId\": \"{{clientTenantID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Staff user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"if (responseCode.code === 201) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        postman.setEnvironmentVariable(\"staffID\", jsonData.id);",
											"}",
											"",
											"",
											"",
											"postman.setNextRequest(\"92d49e9b-72db-4fee-8516-8acec743f685\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"First Name\",\r\n  \"lastName\": \"Last Name\",\r\n  \"username\": \"{{staffUsername}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"roleName\": \"STAFF\",\r\n  \"tenantId\": \"{{clientTenantID}}\",\r\n  \"restaurantId\": \"{{clientRestaurantID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to open a user from another tenant (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/{{adminID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{adminID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to find user from another tenant by Username (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/search?username={{username}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"search"
									],
									"query": [
										{
											"key": "username",
											"value": "{{username}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update Admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([401,403])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" postman.setEnvironmentVariable (\"userNewFirstName\", \"New First Name\");\r",
											" postman.setEnvironmentVariable (\"userNewLastName\", \"New Last Name\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/{{adminID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{adminID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/{{staffID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{staffID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Staff user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 202\"] = responseCode.code === 202;",
											"",
											"if (responseCode.code === 202) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The First Name has been updated\"] = jsonData.firstName === pm.environment.get(\"userNewFirstName\");",
											"        tests[\"The Last Name has been updated\"] = jsonData.lastName === pm.environment.get(\"userNewLastName\");",
											"        tests[\"The User has been enabled\"] = jsonData.enabled === true;",
											"    ",
											"        pm.environment.unset(\"userNewFirstName\");",
											"        pm.environment.unset(\"userNewLastName\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" postman.setEnvironmentVariable (\"userNewFirstName\", \"New First Name\");\r",
											" postman.setEnvironmentVariable (\"userNewLastName\", \"New Last Name\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"{{userNewFirstName}}\",\r\n  \"lastName\": \"{{userNewLastName}}\",\r\n  \"username\": \"{{staffUsername}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"enabled\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/{{staffID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{staffID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{clientTenantID}}/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{clientTenantID}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by Restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{clientTenantID}}/restaurants/{{clientRestaurantID}}/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{clientTenantID}}",
										"restaurants",
										"{{clientRestaurantID}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find user by Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The Username is the same what were looking for\"] = jsonData.username === pm.environment.get(\"clientUsername\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/search?username={{clientUsername}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"search"
									],
									"query": [
										{
											"key": "username",
											"value": "{{clientUsername}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Client Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/logout",
							"host": [
								"{{domain}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{password}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{clientUsername}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Staff",
			"item": [
				{
					"name": "Tenants",
					"item": [
						{
							"name": "Try to open a tenant of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 403\"] = responseCode.code === 403;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{adminTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{adminTenantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update a tenant of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 403\"] = responseCode.code === 403;",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Tenant Name\",\r\n  \"description\": \"Some description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{adminTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{adminTenantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove a tenant of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 403\"] = responseCode.code === 403;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{adminTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{adminTenantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open own tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{clientTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{clientTenantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update own tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 403\"] = responseCode.code === 403;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"New Staff Tenant Name\",\r\n  \"description\": \"Some new Staff description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{clientTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{clientTenantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search tenant by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"Tenant has been found by its ID\"] = jsonData.id = pm.environment.get(\"clientTenantID\");",
											"}",
											"",
											"",
											"",
											"postman.setNextRequest(\"b54eacca-4fc7-4d03-9e2c-1933daf367f3\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/search?id={{clientTenantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"search"
									],
									"query": [
										{
											"key": "id",
											"value": "{{clientTenantID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get tenants (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([403,404])"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Restaurants",
					"item": [
						{
							"name": "Try to create a new restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([401,403])\r",
											"\r",
											"\r",
											"\r",
											"postman.setNextRequest(\"7cd0ed8b-822b-4a8f-a965-53fdbff9009d\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"StaffAliasName\",\r\n  \"name\": \"Staff Restaurant Name\",\r\n  \"tenantId\": \"{{clientTenantID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to open a restaurant of another user  (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([403,404])",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{adminRestaurantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{adminRestaurantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update a restaurant of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([401,403])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"NewStaffAliasName\",\r\n  \"name\": \"New Staff Restaurant Name\",\r\n  \"tenantId\": \"{{adminTenantID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{adminRestaurantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{adminRestaurantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove a restaurant of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([401,403])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{adminRestaurantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{adminRestaurantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open own restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{clientRestaurantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{clientRestaurantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update own restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 403\"] = responseCode.code === 403;",
											"",
											"if (responseCode.code === 403) {",
											"",
											"        pm.environment.unset(\"restaurantNewName\");",
											"        pm.environment.unset(\"restaurantNewAliasName\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  postman.setEnvironmentVariable(\"restaurantNewName\", \"New Staff Restaurant Name\");\r",
											"  postman.setEnvironmentVariable (\"restaurantNewAliasName\", \"NewStaffAliasName\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aliasName\": \"{{restaurantNewAliasName}}\",\r\n  \"name\": \"{{restaurantNewName}}\",\r\n  \"tenantId\": \"{{clientTenantID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{clientRestaurantID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{clientRestaurantID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get restaurants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"postman.setNextRequest(\"1446d6b5-e230-4032-b9fe-77116ea6f3a8\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to get restaurants by TenantID  (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([403,404])"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{clientTenantID}}/restaurants",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{clientTenantID}}",
										"restaurants"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Menus",
					"item": [
						{
							"name": "Create new menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"if (responseCode.code === 201) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        postman.setEnvironmentVariable(\"staffMenuID\", jsonData.id);",
											"}",
											"",
											"",
											"",
											"postman.setNextRequest(\"75b47b4b-f539-47cb-b2cc-5181efdd995f\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Staff Menu Name\",\r\n  \"categoryName\": \"\",\r\n  \"description\": \"\",\r\n  \"restaurantId\": \"{{clientRestaurantID}}\",\r\n  \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to open a menu of another user (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([403,404])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/{{adminMenuID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"{{adminMenuID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update a menu of another user (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([401,403])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"New Menu Name\",\r\n  \"categoryName\": \"\",\r\n  \"description\": \"NewMenuDescription\",\r\n  \"restaurantId\": \"{{adminRestaurantID}}\",\r\n  \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/{{adminMenuID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"{{adminMenuID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove a menu of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([403,404])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{adminMenuID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{adminMenuID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open own menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/{{staffMenuID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"{{staffMenuID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update own menu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 202\"] = responseCode.code === 202;",
											"",
											"if (responseCode.code === 202) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The name of the menu has been updated\"] = jsonData.name === pm.environment.get(\"newMenuName\");",
											"        tests[\"The description of the menu has been updated\"] = jsonData.description === pm.environment.get(\"newMenuDescription\");",
											"        tests[\"The category name of the menu has been updated\"] = jsonData.categoryName === pm.environment.get(\"newCategoryName\");",
											"        tests[\"The menu status has been updated\"] = jsonData.active = pm.environment.get(\"newMenuStatus\");",
											"    ",
											"        pm.environment.unset(\"newMenuName\");",
											"        pm.environment.unset(\"newMenuDescription\");",
											"        pm.environment.unset(\"newCategoryName\");",
											"        pm.environment.unset(\"newMenuStatus\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  postman.setEnvironmentVariable (\"newMenuName\", \"New Staff Menu Name\");\r",
											"  postman.setEnvironmentVariable (\"newMenuDescription\", \"New Staff Menu Description\");\r",
											"  postman.setEnvironmentVariable (\"newCategoryName\", \"New Staff Category Name\");\r",
											"  postman.setEnvironmentVariable (\"newMenuStatus\", true)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"restaurantId\": \"{{clientRestaurantID}}\",\r\n  \"name\": \"{{newMenuName}}\",\r\n  \"description\": \"{{newMenuDescription}}\",\r\n  \"categoryName\": \"{{newCategoryName}}\",\r\n  \"active\": {{newMenuStatus}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/menus/{{staffMenuID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus",
										"{{staffMenuID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all menus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"\r",
											"\r",
											"postman.setNextRequest(\"2ff3ef23-ea72-46e0-8884-da84f0842da0\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"menus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to get menus by RestaurantID  (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([403,404])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/restaurants/{{clientRestaurantID}}/menus",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"restaurants",
										"{{clientRestaurantID}}",
										"menus"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Products",
					"item": [
						{
							"name": "Create new product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"if (responseCode.code === 201) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        postman.setEnvironmentVariable(\"staffProductID\", jsonData.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"price\": 0.00,\r\n  \"name\": \"Product Staff Name\",\r\n  \"description\": \"\",\r\n  \"menuId\": \"{{staffMenuID}}\",\r\n  \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open a product of another user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"\r",
											"\r",
											"postman.setNextRequest(\"69cd78cc-baa5-4676-9ce9-b3390e52bf41\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{adminProductID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{adminProductID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update a product of another user (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([403,404])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"New Staff Product Name\",\r\n  \"categoryName\": \"\",\r\n  \"description\": \"NewStaffProductDescription\",\r\n  \"restaurantId\": \"{{adminRestaurantID}}\",\r\n  \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{adminProductID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{adminProductID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to remove a product of another user (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([403,404])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{adminProductID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{adminProductID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open own product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{staffProductID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{staffProductID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update own product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 202\"] = responseCode.code === 202;",
											"",
											"if (responseCode.code === 202) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The name of the product has been updated\"] = jsonData.name === pm.environment.get(\"newProductName\");",
											"        tests[\"The description of the product has been updated\"] = jsonData.description === pm.environment.get(\"newProductDescription\");",
											"        tests[\"The price of the product has been updated\"] = jsonData.price == pm.environment.get(\"newProductPrice\");",
											"        tests[\"The status of the product has been updated\"] = jsonData.price = pm.environment.get(\"newProductStatus\");",
											"    ",
											"        pm.environment.unset(\"newProductName\");",
											"        pm.environment.unset(\"newProductDescription\");",
											"        pm.environment.unset(\"newProductPrice\");",
											"        pm.environment.unset(\"newProductStatus\");      ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  postman.setEnvironmentVariable (\"newProductName\", \"New Staff Product Name\");\r",
											"  postman.setEnvironmentVariable (\"newProductDescription\", \"New Staff Product Description\");\r",
											"  postman.setEnvironmentVariable (\"newProductPrice\", 1000000.99);\r",
											"  postman.setEnvironmentVariable (\"newProductStatus\", true)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"price\": {{newProductPrice}},\r\n  \"name\": \"{{newProductName}}\",\r\n  \"description\": \"{{newProductDescription}}\",\r\n  \"menuId\": \"{{adminMenuID}}\",\r\n  \"active\": {{newProductStatus}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{staffProductID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{staffProductID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update own product by image (gif)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"The image of the product has been uploaded\", function() {",
											"        pm.expect(jsonData).to.have.property('fileName');",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "giphy.gif"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{staffProductID}}/image",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{staffProductID}}",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a product image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"if (responseCode.code === 200) { \r",
											"    pm.test(\"The image of the product has a .gif format\", function() {\r",
											"        pm.expect(pm.response.text()).to.include(\".gif\");\r",
											"});\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{domain}}/api/v1/products/{{staffProductID}}/image",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products",
										"{{staffProductID}}",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"postman.setNextRequest(\"d6e938bd-38c7-46ec-96fe-15e74ab46039\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/api/v1/products",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"products"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Try to create a new Staff user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([401,403])",
											"",
											"",
											"",
											"postman.setNextRequest(\"9fc7f0a4-ad31-4917-8bf6-c7a473724c03\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"First Staff Name\",\r\n  \"lastName\": \"Last Staff Name\",\r\n  \"username\": \"staff2user@identa.io\",\r\n  \"password\": \"{{password}}\",\r\n  \"roleName\": \"STAFF\",\r\n  \"tenantId\": \"{{clientTenantID}}\",\r\n  \"restaurantId\": \"{{clientRestaurantID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to open a user from another tenant (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/{{adminID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{adminID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to find user from another tenant by Username (skipped)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/search?username={{username}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"search"
									],
									"query": [
										{
											"key": "username",
											"value": "{{username}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update Client user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.expect(pm.response.code).to.be.oneOf([401,403])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{clientUsername}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/{{clientID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{clientID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/{{staffID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{staffID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 202\"] = responseCode.code === 202;",
											"",
											"if (responseCode.code === 202) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The First Name has been updated\"] = jsonData.firstName === pm.environment.get(\"userNewFirstName\");",
											"        tests[\"The Last Name has been updated\"] = jsonData.lastName === pm.environment.get(\"userNewLastName\");",
											"        tests[\"The User has been enabled\"] = jsonData.enabled === true;",
											"    ",
											"        pm.environment.unset(\"userNewFirstName\");",
											"        pm.environment.unset(\"userNewLastName\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" postman.setEnvironmentVariable (\"userNewFirstName\", \"New Staff First Name\");\r",
											" postman.setEnvironmentVariable (\"userNewLastName\", \"New Staff Last Name\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"{{userNewFirstName}}\",\r\n  \"lastName\": \"{{userNewLastName}}\",\r\n  \"username\": \"{{staffUsername}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"enabled\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/{{staffID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{staffID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by Tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{clientTenantID}}/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{clientTenantID}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by Restaurant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/tenants/{{clientTenantID}}/restaurants/{{clientRestaurantID}}/users",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"tenants",
										"{{clientTenantID}}",
										"restaurants",
										"{{clientRestaurantID}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find user by Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"if (responseCode.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"        tests[\"The Username is the same what were looking for\"] = jsonData.username === pm.environment.get(\"staffUsername\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/api/v1/users/search?username={{staffUsername}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"search"
									],
									"query": [
										{
											"key": "username",
											"value": "{{staffUsername}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Staff Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/logout",
							"host": [
								"{{domain}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "username",
						"value": "{{staffUsername}}",
						"type": "string"
					},
					{
						"key": "password",
						"value": "{{password}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tear Down",
			"item": [
				{
					"name": "Remove Staff product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/products/{{staffProductID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{staffProductID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Staff menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/menus/{{staffMenuID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"menus",
								"{{staffMenuID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Client product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/products/{{clientProductID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{clientProductID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Client menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/menus/{{clientMenuID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"menus",
								"{{clientMenuID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Staff user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/{{staffID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{staffID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Client restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/restaurants/{{clientRestaurantID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"restaurants",
								"{{clientRestaurantID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Client user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/users/{{clientID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{clientID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Client tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants/{{clientTenantID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants",
								"{{clientTenantID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Admin product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/products/{{adminProductID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{adminProductID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Admin menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/menus/{{adminMenuID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"menus",
								"{{adminMenuID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Admin restaurant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/api/v1/restaurants/{{adminRestaurantID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"restaurants",
								"{{adminRestaurantID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Admin tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/api/v1/tenants/{{adminTenantID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"api",
								"v1",
								"tenants",
								"{{adminTenantID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/logout",
							"host": [
								"{{domain}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Remove all test data",
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{password}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{username}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}